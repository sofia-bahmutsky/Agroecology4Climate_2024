[
  {
    "objectID": "timeline.html",
    "href": "timeline.html",
    "title": "Timeline",
    "section": "",
    "text": "We can put our weekly meeting notes, Timeline!"
  },
  {
    "objectID": "parameters.html",
    "href": "parameters.html",
    "title": "Parameter",
    "section": "",
    "text": "Organized all the parameters we used in the model\n\nParameters for Crop Residue Nitrogen Calculation\n\n\n\n\n\n\n\n\n\n\n\nParameter groups\nParameters\nExplanation\nData source\nRelated Function\n\n\n\n\n\nFarm\nArea\nNumerical, total area of the farm (ha)\nLiteFarm\n\n\n\n\nFarm\nYield\nNumerical, the estimated yield (\\(kg/ha\\))\nLiteFarm\n\n\n\n\nCrop\nMoisture\nMoisture content of product (%)\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(N_p\\)\nN concentration in the product (\\(kg \\ kg^{-1}\\))\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(N_s\\)\nN concentration in the straw (\\(kg \\ kg^{-1}\\))\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(N_r\\)\nN concentration in the roots (\\(kg \\ kg^{-1}\\))\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(N_e\\)\nN concentration in the extra root material (\\(kg \\ kg^{-1}\\))\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(R_s\\)\nRelative biomass allocation coefficient for straw\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(R_p\\)\nRelative biomass allocation coefficient for product\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(R_r\\)\nRelative biomass allocation coefficient for roots\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop\n\\(R_e\\)\nRelative biomass allocation coefficient for extra-root material\nHolos default/External informationÔºàuser definedÔºâ\nCropParameterManager -&gt; get_crop_parameter()\n\n\n\nCrop group\n\\(C_{concentration}\\)\nCarbon concentration of all plant parts (\\(kg \\ kg^{-1}\\))\nHolos default/External informationÔºàuser definedÔºâ\nCropGroupManager -&gt; get_crop_group()\n\n\n\nCrop group\n\\(S_p\\)\nPercentage of product yield returned to soil\nHolos default/External informationÔºàuser definedÔºâ\nCropGroupManager -&gt; get_crop_group()\n\n\n\nCrop group\n\\(S_s\\)\nPercentage of straw returned to soils\nHolos default/External informationÔºàuser definedÔºâ\nCropGroupManager -&gt; get_crop_group()\n\n\n\nCrop group\n\\(S_r\\)\nPercentage of roots returned to soil\nHolos default/External informationÔºàuser definedÔºâ\nCropGroupManager -&gt; get_crop_group()\n\n\n\nClimate & soil\n\\(P_i\\)\nAnnual growing season precipitation (May ‚Äì October), in ecodistrict ‚Äúi‚Äù (mm)\nHolos default/NASA POWER\nClimateSoilDataManager -&gt; get_climate_soil_data\n\n\n\nClimate & soil\n\\(PE\\)\nGrowing season potential evapotranspiration, by ecodistrict (May ‚Äì October)\nHolos default/NASA POWER\nClimateSoilDataManager -&gt; get_climate_soil_data\n\n\n\nClimate & soil\n\\(FR\\_Topo_{i}\\)\nFraction of land occupied by lower portions of landscape\nHolos default\nClimateSoilDataManager -&gt; get_climate_soil_data\n\n\n\nModifiers / soil\n\\(RF\\_TX_{i}\\)\nWeighted modifier which provides a correction of the \\(EF_{Topo}\\) in ecodistrict ‚Äò‚Äòi‚Äô‚Äô based on the soil texture\nHolos default/HWSD 2.0\nbased on source == ‚Äúdefault‚Äù[] ModifierSoilTexture -&gt; get_rf_tx_modifier()/source == ‚Äúexternal‚Äù [ExternalSoilTextureDataFetxher -&gt; get_soil_texture()]\n\n\n\nModifiers\n\\(RF\\_CS\\)\nReduction factor for Cropping System\nHolos default/External information(user-defined)\nModifier -&gt; get_modifier()\n\n\n\nModifiers\n\\(RF\\_NS\\)\nN source modifier RF_NS (SN = Synthetic Nitrogen; ON = Organic Nitrogen; CRN = Crop Residue Nitrogen)\nHolos default/External information(user-defined)\nModifier -&gt; get_modifier()\n\n\n\nModifiers\n\\(RF\\_AM\\)\nReduction factor based on application method, only applicable to calculations of EF specific for SN\nHolos default/External information(user-defined)\nModifier -&gt; get_modifier()\n\n\n\nModifiers\n\\(RF\\_Till\\)\nTillage modifier (Conservation or Conventional Tillage)\nHolos default/External information(user-defined)\nModifier -&gt; get_modifier()\n\n\n\n\nRF_AM\n\ncontrolled_release\nnitrification_inhibitor\nurease_inhibitor\nboth_inhibitors\ndefault\n\nRF_CS\n\nAnnual\nPerennial\n\nRF_NS\n\nRF_NS_CRN\nRF_NS_SN\nRF_NS_ON\nRF_NC_Unknown\n\nRF_Till(eastern/western)\n\nreduced_tillage\nno_tillage\nintensive_tillage\nunknown"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "What is Holos\nThe Holos model estimates greenhouse gas (GHG) emissions and changes in soil carbon content on Canadian farms, helping users explore ways to reduce emissions and increase soil carbon content. Users can input farm-specific data and adjust management practices such as livestock diets or farming practices. The model utilizes climate, soil, and agronomic data to calculate emissions from a variety of sources, including crops, livestock, and energy use. Documentation and FAQs are available on GitHub Learn more\n\n\nWhat is PyHolos\nPyHolos is a model that integrates the Holos greenhouse gas emissions calculation module into the LiteFarm framework, specifically focusing on nitrous oxide (ùëÅ2ùëÇ) emissions from crop residues. It enhances the original Holos model to provide more accurate calculations of ùëÅ2ùëÇ emissions related to crop residue management.\n\n\n\nPyHolos Structure\n\n\n\n\nGoal\nOur project will work to enhance the existing emissions model, PyHolos, by incorporating plot-level interventions and increasing the dynamicity of the model parameters, with the hope of making the model more applicable to different regions. Throughout this process we aim to base our work in agroecological and agronomic principles, while also contemplating farmer accessibility and implementation. Specifically, we intend to achieve the following objectives:\nUpdate the existing PyHolos model to increase the dynamicity of the model equations, making sure to reinforce this work with agronomic principles. The initial focus will be on expanding across Canada, then to other regions of the world.\nUtilize experimental data from the UBC farm as a test bed for the PyHolos model to better inform model parameters. For instance, we hope to draw on the cause-and-effect relationships established through the numerous agricultural experiments conducted at the UBC Farm to help us identify the emission contributions generated by specific farming inputs and practices."
  },
  {
    "objectID": "Introduction.html",
    "href": "Introduction.html",
    "title": "Getting Started",
    "section": "",
    "text": "What is Holos\nThe Holos model estimates greenhouse gas (GHG) emissions and changes in soil carbon content on Canadian farms, helping users explore ways to reduce emissions and increase soil carbon content. Users can input farm-specific data and adjust management practices such as livestock diets or farming practices. The model utilizes climate, soil, and agronomic data to calculate emissions from a variety of sources, including crops, livestock, and energy use. Documentation and FAQs are available on GitHub Learn more\n\n\nWhat is PyHolos\nPyHolos is a model that integrates the Holos greenhouse gas emissions calculation module into the LiteFarm framework, specifically focusing on nitrous oxide (ùëÅ2ùëÇ) emissions from crop residues. It enhances the original Holos model to provide more accurate calculations of ùëÅ2ùëÇ emissions related to crop residue management.\n\n\n\nPyHolos Structure\n\n\n\n\nGoal\nOur project will work to enhance the existing emissions model, PyHolos, by incorporating plot-level interventions and increasing the dynamicity of the model parameters, with the hope of making the model more applicable to different regions. Throughout this process we aim to base our work in agroecological and agronomic principles, while also contemplating farmer accessibility and implementation. Specifically, we intend to achieve the following objectives:\nUpdate the existing PyHolos model to increase the dynamicity of the model equations, making sure to reinforce this work with agronomic principles. The initial focus will be on expanding across Canada, then to other regions of the world.\nUtilize experimental data from the UBC farm as a test bed for the PyHolos model to better inform model parameters. For instance, we hope to draw on the cause-and-effect relationships established through the numerous agricultural experiments conducted at the UBC Farm to help us identify the emission contributions generated by specific farming inputs and practices."
  },
  {
    "objectID": "equations.html",
    "href": "equations.html",
    "title": "Formula",
    "section": "",
    "text": "CropResidueCalculator\n\n\\(C_p\\): Above and Belowground Residue Input\n\n\\(\\text{if} \\quad|(S_p - 100)| &lt; 1 \\times 10^{-5}\\) \\[\nC_p = [yield \\times (1 - \\frac{{moisture \\ content}}{100})] \\times {Carbon \\ concentration} \\quad \\text{(2.1.2-6)}\n\\]\nOtherwise \\[\nC_p = [(yield + yield \\times \\frac{S_p}{100}) \\times (1 - \\frac{{moisture \\ content}}{100})] \\times {Carbon \\ concentration}\n\\]\nHolos Code Reference: GitHub - Equation 2.1.2-6\nVariables:\n\n\\(C_p\\): Plant carbon in agricultural product (\\(kg ha^{-1}\\))\n\\(yield\\): Crop yield (\\({kg} \\text{ wet weight } ha^{-1}\\), default provided, user override)\n\\(S_p\\): Percentage of product yield returned to soil (user override)\n\\(\\text{moisture content}\\): Moisture content (%) of crop product [Holos Table 7]\n\\(\\text{Carbon concentration}\\): C concentration of all plant parts (\\(kg kg^{-1}\\))\n\n\n\\(C_{p\\_to\\_soil}\\): Carbon input from product\n\n\\[\nC_{{p\\_to\\_soil}} = C_p \\times \\frac{S_p}{100} \\quad \\text{(2.1.2-7)}\n\\]\nHolos Code Reference: GitHub - Equation 2.1.2-7\nVariables:\n\n\\(C_{p\\_to\\_soil}\\): Carbon input from product (\\(kg ha^{-1}\\))\n\\(C_p\\): Plant C (carbon) in agricultural product (\\(kg ha^{-1}\\))\n\\(S_p\\): Percentage of product yield returned to soil (user override)\n\n\n\n3. \\(C_s\\): Carbon Input from Straw\n\\[\nC_s = C_p \\times \\frac{R_s}{R_p} \\times \\frac{S_s}{100} \\quad \\text{(2.1.2-8)}\n\\]\nHolos Code Reference: GitHub - Equation 2.1.2-8\nVariables:\n\n\\(C_s\\): C (carbon) input from straw (\\(kg ha^{-1}\\))\n\\(C_p\\): Plant C (carbon) in agricultural product (\\(kg ha^{-1}\\))\n\\(R_s\\): Relative biomass allocation coefficient for straw [Holos Table 7]\n\\(R_p\\)ÔºöRelative biomass allocation coefficient for product [Holos Table 7]\n\\(S_s\\): Percentage of straw returned to soil (user override)\n\n\n\n4. \\(C_r\\): Carbon input from Root\n\\[\nC_r = C_p \\times \\frac{R_r}{R_p} \\times \\frac{S_r}{100} \\quad \\text{(2.1.2-9)}\n\\]\nHolos Code Reference: GitHub - Equation 2.1.2-9\nVariables:\n\n\\(C_r\\): C (carbon) input from roots (\\(kg ha^{-1}\\))\n\\(C_p\\): Plant C (carbon) in agricultural product (\\(kg ha^{-1}\\))\n\\(R_r\\):Relative biomass allocation coefficient for roots [Holos Table 7]\n\\(R_p\\)ÔºöRelative biomass allocation coefficient for product [Holos Table 7]\n\\(S_r\\): Percentage of roots returned to soil (user override)\n\n\n\n5. \\(C_e\\): Carbon Input from Exudate\n\\[\nC_e = C_p \\times \\frac{R_e}{R_p} \\quad \\text{(2.1.2-9)}\n\\]\nHolos Code Reference: GitHub - Equation 2.1.2-9\nVariables:\n\n\\(C_e\\): C (carbon) input from extra-root material (\\(kg ha^{-1}\\))\n\\(C_p\\): Plant C (carbon) in agricultural product (\\(kg ha^{-1}\\))\n\\(R_e\\): Relative biomass allocation coefficient for extra-root material [Holos Table 7]\n\\(R_p\\): Relative biomass allocation coefficient for product [Holos Table 7]\n\n\n\n6. \\(Grain_N\\)\n\\[\n{Grain}_N = \\frac{C_{p\\_to\\_soil}}{0.45} \\times \\frac{N_p}{1000}\\quad \\text{(2.5.6-2)}\n\\]\nHolos Code Reference: Holos GitHub - Equation 2.5.6-2\nVariables:\n\n\\({Grain}_N\\): Nitrogen content of the grain returned to the soil (\\(kg N ha^{-1}\\))\n\\(C_{p\\_to\\_soil}\\): Carbon input from product (\\(kg ha^{-1}\\))\n\\(N_p\\): N concentration in the product (\\(kg kg^{-1}\\)) [Holos Table 7]\n\n\n\n7. \\(Straw_N\\)\n\\[\n{Straw}_N = \\frac{C_s}{0.45} \\times \\frac{N_s}{1000} \\quad \\text{(2.5.6-3)}\n\\]\nHolos Code Reference: GitHub - Equation 2.5.6-3\nVariables:\n\n\\({Straw}_N\\): Nitrogen content of the straw returned to the soil (\\(kg N ha^{-1}\\))\n\\(C_s\\): Carbon input from straw (\\(kg ha^{-1}\\))\n\\(N_s\\): N concentration in the straw (\\(kg kg^{-1}\\)) [Holos Table 7]\n\n\n\n8. \\(Root_N\\)\n\\[\n{Root}_N = \\frac{C_r}{0.45} \\times \\frac{N_r}{1000}\\quad \\text{(2.5.6-4)}\n\\]\nHolos Code Reference: GitHub - Equation 2.5.6-4\nVariables:\n\n\\({Root}_N\\): Nitrogen content of the root returned to the soil (\\(kg N ha^{-1}\\))\n\\(C_r\\): Carbon input from roots (\\(kg ha^{-1}\\))\n\\(N_r\\): N concentration in the roots (\\(kg kg^{-1}\\)) [Holos Table 7]\n\n\n\n9. \\(Exudate_N\\)\n\\[\n{Exudate}_N = \\frac{C_e}{0.45} \\times \\frac{N_e}{1000} \\quad \\text{(2.5.6-5)}\n\\]\nHolos Code Reference: GitHub - Equation 2.5.6-5\nVariables:\n\n\\(\\text{Exudate}_N\\): Nitrogen content of the exudates returned to the soil (\\(kg N ha^{-1}\\))\n\\(C_e\\): Carbon input from extra-root material (\\(kg ha^{-1}\\))\n\\(N_e\\): N concentration in the extra root material (\\(kg kg^{-1}\\)) [Holos Table 7]\n\n\n\n10. AboveGround Residue Nitrogen\nFor Annual and Perennial Plants,\n\\[\nAboveGround_{residue\\_N} = [{Grain_N} + {Straw_N}] \\quad \\text{(2.5.6-6)}\n\\] For Root Plant,\n\\[\nAboveGround_{residue\\_N} = {Straw_N} \\quad \\text{(2.5.6-6)}\n\\] For Cover and Silage Plant,\n\\[\nAboveGround_{residue\\_N} = {Grain_N} \\quad \\text{(2.5.6-6)}\n\\]\nHolos Code Reference: Holos GitHub - Equation 2.5.6-6\nVariables:\n\n\\(AboveGround_{residue\\_N}\\): Nitrogen in above-ground crop residues (\\(kg N\\))\n\\({Grain_N}\\): Nitrogen content of the grain returned to the soil (\\(kg N ha^{-1}\\))\n\\({Straw_N}\\): Nitrogen content of the straw returned to the soil (\\(kg N ha^{-1}\\))\n\n\n\n11. BelowGround Residue Nitrogen\nFor annual plants:\n\\[\nBelowGround_{{residue_N}} = [{Root_N} + {Exudate_N}] \\quad \\text{(2.5.6-7)}\n\\]\nHolos Code Reference: Holos GitHub - Equation 2.5.6-7\nFor perennial plants:\n\\[\nBelowGround_{residue_N} = [\\frac{S_r}{100} \\times {Root}_N] + {Exudate_N} \\quad \\text{(2.5.6-8)}\n\\]\nFor root plant,\n\\[\nBelowGround_{residue_N} = {Grian_N} + {Exudate_N} \\quad \\text{(2.5.6-8)}\n\\]\nFor cover and silage plant,\n\\[\nBelowGround_{residue_N} = {Root_N} + {Exudate_N} \\quad \\text{(2.5.6-8)}\n\\]\nHolos Code Reference: Holos GitHub - Equation 2.5.6-8\nVariables:\n\n\\(BelowGround_{residue\\_N}\\): Belowground residue nitrogen (\\(kg N ha^{-1}\\))\n\\({Root_N}\\): Nitrogen content of the root returned to the soil (\\(kg N ha^{-1}\\))\n\\({Exudate_N}\\): Nitrogen content of the exudates returned to the soil (\\(kg N ha^{-1}\\))\n\\(S_r\\): Root turnover fraction\n\n\n\n12. The total nitrogen content of the crop residue(\\(N_{crop\\_residues}\\)).\n\\[\nN_{CropResidues} = (AboveGround_{residue\\_N} + BelowGround_{residue\\_N}) \\times {area} \\quad \\text{(2.5.6-9)}\n\\]\nVariables:\n\n\\(N_{CropResidues}\\): resulting from crop residues and N mineralization\n\\(AboveGround_{residue\\_N}\\): Aboveground residue nitrogen (\\(kg N ha^{-1}\\))\n\\(BelowGround_{residue\\_N}\\): Belowground residue nitrogen \\(kg N ha^{-1}\\)\n\\(area\\): Area of crop (\\(ha\\))\n\n\n\nCarbon Input\nAbove ground carbon input\nFor root plants:\n\\[\nAboveGround_{carboninput} = c_s\n\\]\nothers plant, \\[\nAboveGround_{carboninput} = C_{p\\_to\\_soil} + C_s\n\\]\nBelow ground carbon input\nFor root plants:\n\\[\nBelowGround_{carboninput} = C_{p\\_to\\_soil} + C_e\n\\]\nothers plant, \\[\nAboveGround_{carboninput} = C_r + C_e\n\\]\n\n\nEmissionFactorCalculator\n\n\n1. Calculate Base Emission Factor - Due to Ecodistrict-level Emission Factor\nFor humid environment:\\(P &gt; PE\\)\n\\[\nEF_{CT} = \\exp^{0.00558 \\times P - 7.7} \\quad(2.5.1-1)\n\\] For dry environment \\(PE \\geq P\\)\n\\[\nEF_{CT}= \\exp^{0.00558 \\times PE - 7.7}\\quad(2.5.1-2)\n\\]\nHolos Code Reference: GitHub - Equation 2.5.1\nVariables:\n\n\\(EF_{CT}\\): Ecodistrict-level emission factor (\\(kg \\, N_2O\\text{-}N \\, (kg \\, N)^{-1}\\))\n\\(P\\): Annual growing season precipitation (May ‚Äì October)(mm)\n\\(PE\\): Growing season potential evapotranspiration, by ecodistrict (May ‚Äì October) (mm)\n\n\n\n2. Calculate Emission Factor Adjustment Due to Position in Landscape/Topography\nFor humid environments \\(P &gt; PE\\) :\n\\[\nEF_{Topo} = EF_{CT} \\quad(2.5.2-1)\n\\]\nFor dry environment \\(PE \\geq P\\):\n\nFor non-irrigated sites:\n\n\\[\nEF_{Topo} = (EF\\\\\\_CT_{P &lt; PE}\\times FR_{Topo}) + [EF\\\\\\_CT_{P&gt;PE} \\times (1 - FR_{Topo})] \\quad(2.5.2-2)\n\\]\nFor irrigated sites, the assumption is that the irrigation amount is equal to PE - P, thus making P = PE,\n\\[\nEF_{Topo} = EF_{CT} \\quad (2.5.2-3)\n\\]\nHolos Code Reference: GitHub - Equation 2.5.2\nVariables:\n\n\\(EF_{Topo}\\): N2O emission factor adjusted due to position in landscape and moisture regime (\\(kg \\, N_2O\\text{-}N\\))\n\\(FR_{Topo}\\): Fraction of land occupied by lower portions of the landscape\n\n\n\n3. Calculate Emission Factor Adjustment Due to Soil Texture\n\\[\nEF_{Base} = (EF_{Topo} \\times RF\\_TX) \\times \\frac{1}{0.645} \\quad (2.5.3-2)\n\\]\n\\[\nEF = EF_{Base} * RF\\_NS * RF\\_Till *RF\\_CS * RF\\_AM\n\\]\nHolos Code Reference: GitHub - Equation 2.5.3-2\nVariables:\n\n\\(RF\\_TX\\): Weighted modifier which provides a correction of the \\(EF\\_Topo\\) in ecodistrict based on the soil texture.\n\\(EF\\_Base\\): A function of the three factors that create a base ecodistrict-specific value that accounts for the climatic, topographic, and edaphic characteristics of the spatial unit for lands.\n\\(\\frac{1}{0.645}\\): Fraction of growing season emissions of total annual emissions (Pelster et al.¬†2022, in prep.).\n\n\n\nEmissionCalculator\n\n\n1. Calculate The direct nitrogen emission from crop residue\n\\[\nN_2O_{N_{CropResidues}} = N_{CropResidues} \\times EF \\quad \\text{(2.6.5-2)}\n\\]\nHolos Code Reference: GitHub - Equation 2.6.5-2\nVariables:\n\n\\(N_2O_{N_{CropResidues}}\\): Direct N‚ÇÇO emissions (\\(kg \\, N_2O\\text{-}N \\, ha^{-1}\\)) resulting from crop residues\n\\(N_{CropResidues}\\): N (nitrogen) inputs from crop residue returned to soil (\\(kg N\\))\n\\(EF\\): Emission factor for crop residue nitrogen\n\n\n\n2. The total direct nitrogen emission from all crop sources\n\\(N_2O_{N_{direct}} = N_2O_{N_{SNdirect}} + N_2O_{N_{CropResidues}} + N_2O_{N_{CRNmindirect}} + N_2O_{N_{ONdirect}}\\)\nNotes:\nCurrently, only Nitrogen Direct Emission from crop residues is calculated, as this only accounts for crop-related factors and not livestock, fertilizer, and manure.\nVariables:\n\n\\(N_2O_{N_{SNdirect}}\\): N‚ÇÇO emissions (\\(kg \\, N_2O\\text{-}N \\, kg^{-1} \\, N \\, ha^{-1}\\)) resulting from fertilizer application\n\\(N_2O_{N_{CropResidues}}\\): N‚ÇÇO emissions (\\(kg \\, N_2O\\text{-}N \\, kg^{-1} \\, N \\, ha^{-1}\\)) resulting from crop residues (and N mineralization?)\n\\(N_2O_{N_{CRNmindirect}}\\): N‚ÇÇO emissions (\\(kg \\, N_2O\\text{-}N \\, kg^{-1} \\, N \\, ha^{-1}\\)) resulting from N mineralization\n\\(N_2O_{N_{ONdirect}}\\): N‚ÇÇO emissions (\\(kg \\, N_2O\\text{-}N \\, kg^{-1} \\, N \\, ha^{-1}\\)) resulting from organic fertilizers\n\n\n\n3. Convert \\(N‚ÇÇO_N\\) to N‚ÇÇO\n\\[\nN_2O = N_2O_N \\times \\frac{44}{28}\n\\]\nVariables:\n\n\\(\\frac{44}{28}\\): Conversion factor from N‚ÇÇO_N to N‚ÇÇO based on molecular mass\n\n\n\n4. Calculate CO‚ÇÇ Equivalent of N‚ÇÇO Emissions\n\\[\nCO_2 = N_2O \\times 273\n\\]\nNotes:\nHolos uses 273 as the Global Warming Potential value for N‚ÇÇO. Holos Reference\nVariables:\n\n\\(273\\): Global Warming Potential for N‚ÇÇO compared to CO‚ÇÇ\n\n\n\nScientific mode Vs Farm mode\nDifference\nData source: Default data VS External Data\nextract_default_climate_soil_data() Workflow:\n\nLoad the Holos defaults data for climate, soil, ecodistrict polygons, and RF_TX (differentiated by soil_texture [west/east])\nBased on longitude and latitude, get the ECO_ID for the farm, then fetch all necessary data (P, PE, soil type, and RF_TX)\n\n\nclimate_soil_dict\n\nfetch_external_data(self, points, years_range)\n\nExternalClimateFetcher\nfetch climate data through API (NASA), can get specific climate data within specific year.\nCalculate P and PE using daily precipitation and evapotranspiration.\nget climate_dataÔºàÔºâ\nExternalSoilTextureDataFetcher\nLoad all data source:\n\n\nHWSP_SMU_csvsmu_dfÔºàHarmonized World Soil Database V2.0Ôºâ\nD_TEXTURE_DSDA.csvtexture_df\nHWSD2_RASTER[raster_path]\nrf_tx_params_dist.json[texture_mapped_path]\n\n\nget_raster_value(lon,lat),find SMU_ID\nthen use smu_df == SMU_ID,to find texture code,texure code corresponing to a texture type,\nfinally we use the sampling_rf_tx()\n\nFunction - Farmer mode: Expects all arrays to have a length of 1.\n\nScientific mode: Expects arrays to have lengths greater than 1.\nScientific mode:\nrandom_points = generate_random_points( polygon, num_points=self.num_runs ) based on the location of main farm , to generate the point\nclimate_data, soil_data = self.fetch_external_data(points, self.year_range) within the farm‚Äôs ecodistrict.\nsampling_fr_topo(farm_ecod_fr_topo, self.num_runs)\nFarm mode:\nextract_default_climate_soil_data() -&gt; climate_soil_dict\n\n\n\nProcess\n\ninitial dataset:\n\n{python} {‚Äòfarm_id‚Äô: ‚Äòfarm1‚Äô, ‚Äòarea‚Äô: 10.0, ‚Äòlatitude‚Äô: 49.99704167, ‚Äòlongitude‚Äô: -123.2373389, ‚Äòcrop‚Äô: ‚ÄòSoybean‚Äô, ‚Äòyield‚Äô: 2700.0, ‚Äòstart_year‚Äô: 2021, ‚Äòend_year‚Äô: 2021, ‚Äòeco_id‚Äô: None} „ÄÅ„ÄÅ„ÄÅ FarmDataManager\n{‚Äòfarm_id‚Äô: ‚Äòfarm1‚Äô, ‚Äòarea‚Äô: 10.0, ‚Äòlatitude‚Äô: 49.99704167, ‚Äòlongitude‚Äô: -123.2373389, ‚Äòcrop‚Äô: ‚ÄòSoybean‚Äô, ‚Äòyield‚Äô: 2700.0, ‚Äòstart_year‚Äô: 2021, ‚Äòend_year‚Äô: 2021, ‚Äòeco_id‚Äô: None, ‚Äòprovince‚Äô: ‚ÄòBritish Columbia‚Äô, ‚Äògroup‚Äô: ‚ÄòAnnual‚Äô}\n\n\nClimateSoilDataManager\ndef get_climate_soil_data(self): - climate_soil_data = climate_soil_manager.get_climate_soil_data()\n{‚ÄòP‚Äô: array([512.]), ‚ÄòPE‚Äô: array([483.]), ‚ÄòFR_Topo‚Äô: array([0.]), ‚Äòlocations‚Äô: array([[-123.2373389 , 49.99704167]]), ‚Äòsoil_texture‚Äô: array([1.])}\n\n\nCropParametersManager\n\ndef get_crop_parameters(self): Holos defined parameter\ndef load_user_distributions(self): user defined crop parameters ### 1. Evapotranspiration\n\nParameter:\n\nmean_daily_temperature(T)\nsolar_radiation (S)\nrelative_humidity (R) %\n\nUse Turc equation to calculate Reference evapotranspiration\n\\[\nPE = 0\n\\begin{cases}\n\\text{if} T \\leq 0, \\\\\n\\text{if} |T + 15| \\leq 1* 10^{-10}\n\\end{cases}\n\\] if mean_daily_temperature \\(\\leq 0\\), \\(PE = 0\\)\n\\[\\begin{align*}\n\\text{term1} &= 0.013\\\\\n\\text{term2} &= \\frac{T}{T + 15} \\\\\n\\text{term3} &= (23.8856 \\times S ) + 50 \\\\\n\\text{term4} &= 1 + \\frac{(50 - R)}{70} \\\\\n\\\\\n\\text{if } &\\text{relative\\_humidity} \\geq 50: \\\\\n&\\text{PE} = \\text{term1} \\times \\text{term2} \\times \\text{term3} \\\\\n\\text{else:} \\\\\n&\\text{PE} = \\text{term1} \\times \\text{term2} \\times \\text{term3} \\times \\text{term4}\\\\\n\\text{if } & PE \\leq 0, \\text{return} 0\n\\end{align*}\\]\n\n\nQuestion\ndef sampling_fr_topo\\\n\nI am not sure how much the fr_topo influnce the result, \\\nthe chosen : low = value * 0.75, high = value * 1.25 (here is this come from) [1. Capturing Natural Variability? 2.Balance Between Accuracy and Flexibility?]\nwhat is N mineralization variable\nask this one \\(N_{CropResidues}\\): N (nitrogen) inputs from crop residue returned to soil (\\(kg N\\))\ndo we need to introduce CO‚ÇÇ?"
  }
]